const axios = require('axios');

// C·∫•u h√¨nh base URL
const BASE_URL = 'http://localhost:8080/api/v1';

// Token test (admin token)
const TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZG1pbkBleGFtcGxlLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjA3Nzg4MSwiZXhwIjoxNzUyMTY0MjgxfQ.KWeh9t1xFLhQd-eJpUdZtciwOuIwvhWqVBT90e2m8V8';

// Headers cho request
const headers = {
  'Authorization': `Bearer ${TEST_TOKEN}`,
  'Content-Type': 'application/json'
};

async function testCreateQueue() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test t·∫°o s·ªë th·ª© t·ª± cho b·ªánh nh√¢n...\n');

    // Test 1: Check-in t·ª´ appointment
    console.log('üìã Test 1: Check-in t·ª´ appointment');
    console.log('POST /queues/checkin');
    try {
      const checkinData = {
        appointment_id: 28 // ID appointment c√≥ s·∫µn
      };
      const response1 = await axios.post(`${BASE_URL}/queues/checkin`, checkinData, { headers });
      console.log('‚úÖ Th√†nh c√¥ng:', response1.data.message);
      console.log('üìä Th√¥ng tin queue:', {
        id: response1.data.metadata.id,
        queue_number: response1.data.metadata.queue_number,
        shift_type: response1.data.metadata.shift_type,
        status: response1.data.metadata.status,
        patient_name: response1.data.metadata.patient?.user?.full_name,
        clinic_name: response1.data.metadata.clinic?.name
      });
    } catch (error) {
      console.log('‚ùå L·ªói:', error.response?.data?.message || error.message);
    }
    console.log('');

    // Test 2: Ch·ªâ ƒë·ªãnh th√™m ph√≤ng kh√°m (assign clinic)
    console.log('üè• Test 2: Ch·ªâ ƒë·ªãnh th√™m ph√≤ng kh√°m');
    console.log('POST /queues/assign-clinic');
    try {
      const assignData = {
        patient_id: 8,
        to_clinic_id: 7,
        record_id: 5,
        priority: 2,
        slot_date: '2025-07-10',
        slot_time: '14:30:00'
      };
      const response2 = await axios.post(`${BASE_URL}/queues/assign-clinic`, assignData, { headers });
      console.log('‚úÖ Th√†nh c√¥ng:', response2.data.message);
      console.log('üìä Th√¥ng tin queue:', {
        id: response2.data.metadata.id,
        queue_number: response2.data.metadata.queue_number,
        shift_type: response2.data.metadata.shift_type,
        status: response2.data.metadata.status,
        patient_name: response2.data.metadata.patient?.user?.full_name,
        clinic_name: response2.data.metadata.clinic?.name
      });
    } catch (error) {
      console.log('‚ùå L·ªói:', error.response?.data?.message || error.message);
    }
    console.log('');

    // Test 3: T·∫°o queue walk-in (kh√¥ng c√≥ appointment)
    console.log('üö∂ Test 3: T·∫°o queue walk-in (test service tr·ª±c ti·∫øp)');
    try {
      const QueueService = require('./src/services/queue.service');
      const prisma = require('./src/config/prisma');

      const walkInData = {
        appointment_id: null,
        patient_id: 8,
        clinic_id: 7,
        slot_date: new Date('2025-07-10'),
        slot_time: '09:30:00', // S√°ng
        registered_online: false
      };

      const newQueue = await QueueService.assignQueueNumber(walkInData);
      console.log('‚úÖ Th√†nh c√¥ng t·∫°o queue walk-in');
      console.log('üìä Th√¥ng tin queue:', {
        id: newQueue.id,
        queue_number: newQueue.queue_number,
        shift_type: newQueue.shift_type,
        status: newQueue.status,
        patient_name: newQueue.patient?.user?.full_name,
        clinic_name: newQueue.clinic?.name,
        slot_date: newQueue.slot_date
      });

      await prisma.$disconnect();
    } catch (error) {
      console.log('‚ùå L·ªói:', error.message);
    }
    console.log('');

    // Test 4: Ki·ªÉm tra danh s√°ch queue sau khi t·∫°o
    console.log('üìã Test 4: Ki·ªÉm tra danh s√°ch queue h√¥m nay');
    console.log('GET /queues/today');
    try {
      const response4 = await axios.get(`${BASE_URL}/queues/today`, { headers });
      console.log('‚úÖ Th√†nh c√¥ng:', response4.data.message);
      console.log('üìä T·ªïng s·ªë queue:', response4.data.metadata.length);
      
      if (response4.data.metadata.length > 0) {
        console.log('üìã Danh s√°ch queue:');
        response4.data.metadata.forEach((queue, index) => {
          console.log(`  ${index + 1}. S·ªë ${queue.queue_number} - ${queue.patient?.user?.full_name} - ${queue.clinic?.name} - ${queue.status}`);
        });
      }
    } catch (error) {
      console.log('‚ùå L·ªói:', error.response?.data?.message || error.message);
    }
    console.log('');

    console.log('üéâ Ho√†n th√†nh test t·∫°o s·ªë th·ª© t·ª±!');

  } catch (error) {
    console.error('üí• L·ªói chung:', error.message);
  }
}

// Test tr·ª±c ti·∫øp service (kh√¥ng c·∫ßn server)
async function testQueueServiceDirect() {
  try {
    console.log('üîß Test tr·ª±c ti·∫øp QueueService...\n');
    
    const QueueService = require('./src/services/queue.service');
    const prisma = require('./src/config/prisma');

    // Test 1: T·∫°o queue s√°ng
    console.log('üåÖ Test 1: T·∫°o queue ca s√°ng');
    try {
      const morningQueue = await QueueService.assignQueueNumber({
        appointment_id: null,
        patient_id: 8,
        clinic_id: 7,
        slot_date: new Date('2025-07-10'),
        slot_time: '09:30:00',
        registered_online: false
      });
      console.log('‚úÖ Th√†nh c√¥ng t·∫°o queue s√°ng');
      console.log('üìä Th√¥ng tin:', {
        queue_number: morningQueue.queue_number,
        shift_type: morningQueue.shift_type,
        patient_name: morningQueue.patient?.user?.full_name
      });
    } catch (error) {
      console.log('‚ùå L·ªói:', error.message);
    }
    console.log('');

    // Test 2: T·∫°o queue chi·ªÅu
    console.log('üåÜ Test 2: T·∫°o queue ca chi·ªÅu');
    try {
      const afternoonQueue = await QueueService.assignQueueNumber({
        appointment_id: null,
        patient_id: 8,
        clinic_id: 7,
        slot_date: new Date('2025-07-10'),
        slot_time: '14:30:00',
        registered_online: false
      });
      console.log('‚úÖ Th√†nh c√¥ng t·∫°o queue chi·ªÅu');
      console.log('üìä Th√¥ng tin:', {
        queue_number: afternoonQueue.queue_number,
        shift_type: afternoonQueue.shift_type,
        patient_name: afternoonQueue.patient?.user?.full_name
      });
    } catch (error) {
      console.log('‚ùå L·ªói:', error.message);
    }
    console.log('');

    // Test 3: T·∫°o queue t·ªëi
    console.log('üåô Test 3: T·∫°o queue ca t·ªëi');
    try {
      const nightQueue = await QueueService.assignQueueNumber({
        appointment_id: null,
        patient_id: 8,
        clinic_id: 7,
        slot_date: new Date('2025-07-10'),
        slot_time: '19:30:00',
        registered_online: false
      });
      console.log('‚úÖ Th√†nh c√¥ng t·∫°o queue t·ªëi');
      console.log('üìä Th√¥ng tin:', {
        queue_number: nightQueue.queue_number,
        shift_type: nightQueue.shift_type,
        patient_name: nightQueue.patient?.user?.full_name
      });
    } catch (error) {
      console.log('‚ùå L·ªói:', error.message);
    }
    console.log('');

    // Test 4: Ki·ªÉm tra danh s√°ch queue
    console.log('üìã Test 4: Ki·ªÉm tra danh s√°ch queue h√¥m nay');
    const todayQueues = await QueueService.getQueuesByDate('2025-07-10');
    console.log('‚úÖ Th√†nh c√¥ng');
    console.log('üìä T·ªïng s·ªë queue:', todayQueues.length);
    
    if (todayQueues.length > 0) {
      console.log('üìã Danh s√°ch queue:');
      todayQueues.forEach((queue, index) => {
        console.log(`  ${index + 1}. S·ªë ${queue.queue_number} (${queue.shift_type}) - ${queue.patient?.user?.full_name} - ${queue.clinic?.name} - ${queue.status}`);
      });
    }

    await prisma.$disconnect();
    console.log('\nüéâ Ho√†n th√†nh test QueueService!');

  } catch (error) {
    console.error('üí• L·ªói:', error.message);
  }
}

// Ch·∫°y test
console.log('Ch·ªçn lo·∫°i test:');
console.log('1. Test API (c·∫ßn server ch·∫°y)');
console.log('2. Test Service tr·ª±c ti·∫øp (kh√¥ng c·∫ßn server)');
console.log('');

// M·∫∑c ƒë·ªãnh ch·∫°y test service tr·ª±c ti·∫øp
testQueueServiceDirect(); 