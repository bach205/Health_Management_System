const QueueService = require('../src/services/queue.service');
const prisma = require('../src/config/prisma');

async function testOnlineVsOffline() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test so s√°nh ƒëƒÉng k√Ω Online vs Offline...\n');
    
    const QueueService = require('../src/services/queue.service');
    const prisma = require('../src/config/prisma');

    // Test 1: ƒêƒÉng k√Ω Online (c√≥ appointment)
    console.log('üíª Test 1: ƒêƒÉng k√Ω Online (c√≥ appointment)');
    console.log('='.repeat(50));
    try {
      const onlineQueue = await QueueService.assignQueueNumber({
        appointment_id: 28, // C√≥ appointment
        patient_id: 8,
        clinic_id: 7,
        slot_date: new Date('2025-07-10'),
        slot_time: '14:30:00',
        registered_online: true
      });
      
      console.log('‚úÖ Th√†nh c√¥ng t·∫°o queue Online');
      console.log('üìä Th√¥ng tin chi ti·∫øt:');
      console.log(`   - ID Queue: ${onlineQueue.id}`);
      console.log(`   - S·ªë th·ª© t·ª±: ${onlineQueue.queue_number}`);
      console.log(`   - Lo·∫°i ca: ${onlineQueue.shift_type}`);
      console.log(`   - Tr·∫°ng th√°i: ${onlineQueue.status}`);
      console.log(`   - ƒêƒÉng k√Ω Online: ${onlineQueue.registered_online ? 'C√≥' : 'Kh√¥ng'}`);
      console.log(`   - Th·ªùi gian t·∫°o: ${onlineQueue.created_at}`);
      console.log(`   - Ng√†y kh√°m: ${onlineQueue.slot_date}`);
      console.log(`   - B·ªánh nh√¢n: ${onlineQueue.patient?.user?.full_name}`);
      console.log(`   - Ph√≤ng kh√°m: ${onlineQueue.clinic?.name}`);
      console.log(`   - C√≥ appointment: ${onlineQueue.appointment_id ? 'C√≥' : 'Kh√¥ng'}`);
      
    } catch (error) {
      console.log('‚ùå L·ªói t·∫°o queue Online:', error.message);
    }
    console.log('');

    // Test 2: ƒêƒÉng k√Ω Offline (walk-in, kh√¥ng c√≥ appointment)
    console.log('üö∂ Test 2: ƒêƒÉng k√Ω Offline (walk-in)');
    console.log('='.repeat(50));
    try {
      const offlineQueue = await QueueService.assignQueueNumber({
        appointment_id: null, // Kh√¥ng c√≥ appointment
        patient_id: 8,
        clinic_id: 7,
        slot_date: new Date('2025-07-10'),
        slot_time: '14:30:00',
        registered_online: false
      });
      
      console.log('‚úÖ Th√†nh c√¥ng t·∫°o queue Offline');
      console.log('üìä Th√¥ng tin chi ti·∫øt:');
      console.log(`   - ID Queue: ${offlineQueue.id}`);
      console.log(`   - S·ªë th·ª© t·ª±: ${offlineQueue.queue_number}`);
      console.log(`   - Lo·∫°i ca: ${offlineQueue.shift_type}`);
      console.log(`   - Tr·∫°ng th√°i: ${offlineQueue.status}`);
      console.log(`   - ƒêƒÉng k√Ω Online: ${offlineQueue.registered_online ? 'C√≥' : 'Kh√¥ng'}`);
      console.log(`   - Th·ªùi gian t·∫°o: ${offlineQueue.created_at}`);
      console.log(`   - Ng√†y kh√°m: ${offlineQueue.slot_date}`);
      console.log(`   - B·ªánh nh√¢n: ${offlineQueue.patient?.user?.full_name}`);
      console.log(`   - Ph√≤ng kh√°m: ${offlineQueue.clinic?.name}`);
      console.log(`   - C√≥ appointment: ${offlineQueue.appointment_id ? 'C√≥' : 'Kh√¥ng'}`);
      
    } catch (error) {
      console.log('‚ùå L·ªói t·∫°o queue Offline:', error.message);
    }
    console.log('');

    // Test 3: So s√°nh th·ªùi gian t·∫°o
    console.log('‚è±Ô∏è Test 3: So s√°nh th·ªùi gian t·∫°o');
    console.log('='.repeat(50));
    try {
      const startTime = Date.now();
      
      // T·∫°o queue online
      const onlineStart = Date.now();
      const onlineQueue2 = await QueueService.assignQueueNumber({
        appointment_id: 28,
        patient_id: 8,
        clinic_id: 7,
        slot_date: new Date('2025-07-10'),
        slot_time: '15:30:00',
        registered_online: true
      });
      const onlineTime = Date.now() - onlineStart;
      
      // T·∫°o queue offline
      const offlineStart = Date.now();
      const offlineQueue2 = await QueueService.assignQueueNumber({
        appointment_id: null,
        patient_id: 8,
        clinic_id: 7,
        slot_date: new Date('2025-07-10'),
        slot_time: '15:30:00',
        registered_online: false
      });
      const offlineTime = Date.now() - offlineStart;
      
      const totalTime = Date.now() - startTime;
      
      console.log('üìä K·∫øt qu·∫£ so s√°nh th·ªùi gian:');
      console.log(`   - Th·ªùi gian t·∫°o queue Online: ${onlineTime}ms`);
      console.log(`   - Th·ªùi gian t·∫°o queue Offline: ${offlineTime}ms`);
      console.log(`   - T·ªïng th·ªùi gian test: ${totalTime}ms`);
      console.log(`   - Ch√™nh l·ªách: ${Math.abs(onlineTime - offlineTime)}ms`);
      
      if (onlineTime < offlineTime) {
        console.log('   - üèÜ Online nhanh h∆°n Offline');
      } else if (offlineTime < onlineTime) {
        console.log('   - üèÜ Offline nhanh h∆°n Online');
      } else {
        console.log('   - ‚öñÔ∏è Th·ªùi gian b·∫±ng nhau');
      }
      
    } catch (error) {
      console.log('‚ùå L·ªói so s√°nh th·ªùi gian:', error.message);
    }
    console.log('');

    // Test 4: Ki·ªÉm tra danh s√°ch queue theo lo·∫°i ƒëƒÉng k√Ω
    console.log('üìã Test 4: Ki·ªÉm tra danh s√°ch queue theo lo·∫°i ƒëƒÉng k√Ω');
    console.log('='.repeat(50));
    try {
      const todayQueues = await QueueService.getQueuesByDate('2025-07-10');
      
      const onlineQueues = todayQueues.filter(q => q.registered_online === true);
      const offlineQueues = todayQueues.filter(q => q.registered_online === false);
      
      console.log('üìä Th·ªëng k√™:');
      console.log(`   - T·ªïng s·ªë queue: ${todayQueues.length}`);
      console.log(`   - Queue Online: ${onlineQueues.length}`);
      console.log(`   - Queue Offline: ${offlineQueues.length}`);
      console.log('');
      
      if (onlineQueues.length > 0) {
        console.log('üíª Danh s√°ch Queue Online:');
        onlineQueues.forEach((queue, index) => {
          console.log(`   ${index + 1}. S·ªë ${queue.queue_number} - ${queue.patient?.user?.full_name} - ${queue.clinic?.name} - ${queue.status} - ${queue.created_at}`);
        });
      }
      console.log('');
      
      if (offlineQueues.length > 0) {
        console.log('üö∂ Danh s√°ch Queue Offline:');
        offlineQueues.forEach((queue, index) => {
          console.log(`   ${index + 1}. S·ªë ${queue.queue_number} - ${queue.patient?.user?.full_name} - ${queue.clinic?.name} - ${queue.status} - ${queue.created_at}`);
        });
      }
      
    } catch (error) {
      console.log('‚ùå L·ªói ki·ªÉm tra danh s√°ch:', error.message);
    }
    console.log('');

    // Test 5: Test nhi·ªÅu queue c√πng l√∫c
    console.log('üîÑ Test 5: T·∫°o nhi·ªÅu queue c√πng l√∫c');
    console.log('='.repeat(50));
    try {
      const promises = [];
      const startTime = Date.now();
      
      // T·∫°o 3 queue online (chi·ªÅu)
      for (let i = 0; i < 3; i++) {
        promises.push(QueueService.assignQueueNumber({
          appointment_id: 28,
          patient_id: 8,
          clinic_id: 7,
          slot_date: new Date('2025-07-10'),
          slot_time: `14:${30 + i}:00`, // Chi·ªÅu (13:00-17:00)
          registered_online: true
        }));
      }
      
      // T·∫°o 3 queue offline (t·ªëi)
      for (let i = 0; i < 3; i++) {
        promises.push(QueueService.assignQueueNumber({
          appointment_id: null,
          patient_id: 8,
          clinic_id: 7,
          slot_date: new Date('2025-07-10'),
          slot_time: `18:${30 + i}:00`, // T·ªëi (18:00-22:00)
          registered_online: false
        }));
      }
      
      const results = await Promise.all(promises);
      const totalTime = Date.now() - startTime;
      
      console.log('‚úÖ Th√†nh c√¥ng t·∫°o 6 queue c√πng l√∫c');
      console.log(`üìä Th·ªùi gian t·ªïng: ${totalTime}ms`);
      console.log(`üìä Th·ªùi gian trung b√¨nh m·ªói queue: ${(totalTime / 6).toFixed(2)}ms`);
      
      const onlineResults = results.filter(r => r.registered_online);
      const offlineResults = results.filter(r => !r.registered_online);
      
      console.log(`   - Queue Online t·∫°o ƒë∆∞·ª£c: ${onlineResults.length}`);
      console.log(`   - Queue Offline t·∫°o ƒë∆∞·ª£c: ${offlineResults.length}`);
      
    } catch (error) {
      console.log('‚ùå L·ªói t·∫°o nhi·ªÅu queue:', error.message);
    }
    console.log('');

    await prisma.$disconnect();
    console.log('üéâ Ho√†n th√†nh test so s√°nh Online vs Offline!');

  } catch (error) {
    console.error('üí• L·ªói chung:', error.message);
  }
}

// Ch·∫°y test
testOnlineVsOffline(); 