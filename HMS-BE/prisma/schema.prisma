generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  password      String?
  full_name     String?
  phone         String?     @unique
  role          Role
  address       String?     @db.Text
  date_of_birth DateTime?   @db.Date
  gender        Gender?
  avatar        String?     @db.LongText
  sso_provider  SsoProvider @default(local)
  is_active     Boolean     @default(true)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  patient             Patient?
  doctor              Doctor?
  nurse               Nurse?
  workSchedules       WorkSchedule[]
  examinationOrders   ExaminationOrder[]   @relation("DoctorExaminationOrder")
  primaryRecords      ExaminationRecord[]  @relation("PrimaryDoctor")
  createdRecords      ExaminationRecord[]  @relation("CreatedByUser")
  examinationDetails  ExaminationDetail[]
  passwordResetTokens PasswordResetToken[]
  appointments        Appointment[]        @relation("DoctorAppointment")
  availableSlots      AvailableSlot[]
  documents           Documents[]

  chatsSent                Chat[]                    @relation("ChatSendBy")
  chatsReceived            Chat[]                    @relation("ChatTo")
  conversationParticipants ConversationParticipant[]
  notifications NotificationItems[]

  @@map("users")
}

enum Role {
  doctor
  nurse
  receptionist
  admin
  patient
}

enum SsoProvider {
  google
  facebook
  local
}

enum Gender {
  male
  female
  other
}

model Patient {
  id              Int      @id
  identity_number String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  examinationOrders ExaminationOrder[]
  records           ExaminationRecord[]
  queues            Queue[]
  payments          Payment[]
  balance           PaymentBalance?
  appointments      Appointment[]

  doctorRatings DoctorRating[]

  @@map("patients")
}

model Clinic {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.Text

  workSchedules      WorkSchedule[]
  fromOrders         ExaminationOrder[]  @relation("FromClinic")
  toOrders           ExaminationOrder[]  @relation("ToClinic")
  examinationDetails ExaminationDetail[]
  queues             Queue[]
  appointments       Appointment[]
  availableSlots     AvailableSlot[]

  @@map("clinics")
}

model Doctor {
  user_id      Int      @id
  specialty    String?  @db.VarChar(255) // Thêm trường specialty cho phù hợp với database
  specialty_id Int?
  bio          String?  @db.Text
  price        Int?     @default(0)
  user      User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "doctors_ibfk_1")
  specialtyRel Specialty?     @relation(fields: [specialty_id], references: [id], onUpdate: Restrict, map: "doctors_ibfk_2")
  ratings   DoctorRating[] @relation("DoctorToRating")

  @@index([specialty_id], map: "specialty_id")
  @@map("doctors")
}

model Specialty {
  id      Int      @id @default(autoincrement())
  name    String   @unique(map: "name") @db.VarChar(255)
  doctors Doctor[]

  @@map("specialties")
}

model DoctorRating {
  id            Int      @id @default(autoincrement())
  doctor_id     Int
  patient_id    Int
  appointment_id Int?
  rating        Decimal  @db.Decimal(2, 1)
  comment       String?
  is_anonymous  Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  doctor      Doctor       @relation("DoctorToRating", fields: [doctor_id], references: [user_id], onDelete: Cascade)
  patient     Patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointment_id], references: [id], onDelete: SetNull)

  @@index([doctor_id])
  @@index([patient_id])
  @@index([appointment_id])
  @@map("doctor_ratings")
}

model Nurse {
  user_id   Int     @id
  specialty String?
  bio       String? @db.Text

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("nurses")
}

model Shift {
  id         Int       @id @default(autoincrement())
  name       String?
  start_time DateTime? @db.Time
  end_time   DateTime? @db.Time

  workSchedules WorkSchedule[]

  @@map("shifts")
}

model WorkSchedule {
  id        Int      @id @default(autoincrement())
  user_id   Int
  clinic_id Int
  work_date DateTime @db.Date
  shift_id  Int

  user   User   @relation(fields: [user_id], references: [id])
  clinic Clinic @relation(fields: [clinic_id], references: [id])
  shift  Shift  @relation(fields: [shift_id], references: [id])

  @@map("work_schedules")
}

model ExaminationOrder {
  id             Int      @id @default(autoincrement())
  doctor_id      Int
  patient_id     Int
  from_clinic_id Int
  to_clinic_id   Int
  total_cost     Decimal  @default(0.00)
  created_at     DateTime @default(now())

  doctor     User    @relation("DoctorExaminationOrder", fields: [doctor_id], references: [id])
  patient    Patient @relation(fields: [patient_id], references: [id])
  fromClinic Clinic  @relation("FromClinic", fields: [from_clinic_id], references: [id])
  toClinic   Clinic  @relation("ToClinic", fields: [to_clinic_id], references: [id])

  @@map("examination_orders")
}

model ExaminationRecord {
  id                 Int      @id @default(autoincrement())
  patient_id         Int
  symptoms           String?  @db.Text
  primary_doctor_id  Int?
  final_diagnosis    String?  @db.Text
  created_by_user_id Int?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  patient            Patient             @relation(fields: [patient_id], references: [id])
  primaryDoctor      User?               @relation("PrimaryDoctor", fields: [primary_doctor_id], references: [id])
  createdByUser      User?               @relation("CreatedByUser", fields: [created_by_user_id], references: [id])
  examinationDetails ExaminationDetail[]
  prescriptions      Prescription[]
  invoiceItems       InvoiceItem[]
  queues             Queue[]
  payments           Payment[]

  @@map("examination_records")
}

model ExaminationDetail {
  id          Int               @id @default(autoincrement())
  record_id   Int
  clinic_id   Int
  doctor_id   Int
  result      String?           @db.Text
  note        String?           @db.Text
  examined_at DateTime?
  status      ExaminationStatus @default(pending)

  record ExaminationRecord @relation(fields: [record_id], references: [id])
  clinic Clinic            @relation(fields: [clinic_id], references: [id])
  doctor User              @relation(fields: [doctor_id], references: [id])

  @@map("examination_details")
}

enum ExaminationStatus {
  pending
  in_progress
  done
  cancelled
}

model Queue {
  id                Int         @id @default(autoincrement())
  patient_id        Int
  clinic_id         Int
  record_id         Int?
  appointment_id    Int?
  status            QueueStatus @default(waiting)
  priority          Int         @default(0)
  registered_online Boolean     @default(false)
  qr_code           String?
  called_at         DateTime?
  created_at        DateTime    @default(now())
  shift_type        String?
  queue_number      Int?
  slot_date         DateTime?

  patient     Patient            @relation(fields: [patient_id], references: [id])
  clinic      Clinic             @relation(fields: [clinic_id], references: [id])
  record      ExaminationRecord? @relation(fields: [record_id], references: [id])
  appointment Appointment?       @relation(fields: [appointment_id], references: [id])

  @@map("queues")
}

enum QueueStatus {
  waiting
  in_progress
  done
  skipped
}

model Prescription {
  id         Int      @id @default(autoincrement())
  record_id  Int
  created_at DateTime @default(now())

  record ExaminationRecord  @relation(fields: [record_id], references: [id])
  items  PrescriptionItem[]

  @@map("prescriptions")
}

model PrescriptionItem {
  id              Int     @id @default(autoincrement())
  prescription_id Int
  medicine_id     Int?
  quantity        Int?    @default(1)
  medicine_name   String  @db.VarChar(255)
  dosage          String? @db.VarChar(100)
  frequency       String? @db.VarChar(100)
  duration        String? @db.VarChar(100)
  note            String? @db.Text

  prescription Prescription @relation(fields: [prescription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "prescription_items_ibfk_1")
  medicine     Medicine?    @relation(fields: [medicine_id], references: [id], onUpdate: Restrict, map: "prescription_items_ibfk_2")

  @@index([medicine_id], map: "medicine_id")
  @@index([prescription_id], map: "prescription_id")
  @@map("prescription_items")
}

model Medicine {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(255)
  stock Int     @default(0)
  price Decimal @default(0.00) @db.Decimal(10, 2)

  prescription_items PrescriptionItem[]

  @@map("medicines")
}

model Payment {
  id           Int            @id @default(autoincrement())
  patient_id   Int
  record_id    Int?
  amount       Decimal
  method       PaymentMethod?
  payment_time DateTime       @default(now())
  note         String?        @db.Text
  is_refund    Boolean        @default(false)

  patient Patient            @relation(fields: [patient_id], references: [id])
  record  ExaminationRecord? @relation(fields: [record_id], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  cash
  card
  bank_transfer
  e_wallet
}

model PaymentBalance {
  patient_id Int      @id
  balance    Decimal  @default(0.00)
  updated_at DateTime @updatedAt

  patient Patient @relation(fields: [patient_id], references: [id])

  @@map("payment_balances")
}

model InvoiceItem {
  id          Int      @id @default(autoincrement())
  record_id   Int
  description String?  @db.Text
  amount      Decimal
  created_at  DateTime @default(now())

  record ExaminationRecord @relation(fields: [record_id], references: [id])

  @@map("invoice_items")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([userId])
}

model Appointment {
  id               Int               @id @default(autoincrement())
  patient_id       Int
  clinic_id        Int
  doctor_id        Int
  appointment_date DateTime          @db.Date
  appointment_time DateTime          @db.Time
  status           AppointmentStatus @default(pending)
  priority         Int               @default(0) // 0: normal booking, 1: nurse booking, 2: urgent
  reason           String?           @db.Text // Lý do khám
  note             String?           @db.Text // Ghi chú thêm
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt

  patient Patient @relation(fields: [patient_id], references: [id])
  clinic  Clinic  @relation(fields: [clinic_id], references: [id])
  doctor  User    @relation("DoctorAppointment", fields: [doctor_id], references: [id])
  queues  Queue[] // Một appointment có thể có nhiều queue

  doctorRatings DoctorRating[]

  @@map("appointments")
}

enum AppointmentStatus {
  pending // Chờ xác nhận
  confirmed // Đã xác nhận
  cancelled // Đã hủy
  completed // Đã hoàn thành
}

model AvailableSlot {
  id           Int      @id @default(autoincrement())
  doctor_id    Int
  clinic_id    Int
  slot_date    DateTime @db.Date
  start_time   DateTime @db.Time
  end_time     DateTime @db.Time
  is_available Boolean  @default(true)
  created_at   DateTime @default(now())

  doctor User   @relation(fields: [doctor_id], references: [id])
  clinic Clinic @relation(fields: [clinic_id], references: [id])

  @@map("available_slots")
}

model Conversation {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(255)
  type       ConversationType @default(direct) // direct: 1-1, group: nhiều người
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now()) @updatedAt
  last_message_at DateTime? // Thời gian tin nhắn cuối cùng

  chats        Chat[]
  participants ConversationParticipant[]

  @@map("conversations")
}

enum ConversationType {
  direct
  group
}

model ConversationParticipant {
  id             Int @id @default(autoincrement())
  conversationId Int
  userId         Int

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId], map: "unique_participant")
  @@index([userId], map: "user_id")
  @@map("conversation_participants")
}

model Chat {
  id             Int       @id @default(autoincrement())
  text           String?   @db.Text
  file_url       String?   @db.Text
  file_name      String?   @db.VarChar(255)
  file_type      String?   @db.VarChar(50)
  message_type   MessageType @default(text) // text, image, file, audio, video
  toId           Int
  sendById       Int
  conversationId Int
  is_read        Boolean   @default(false)
  created_at     DateTime? @default(now())
  updated_at     DateTime? @default(now()) @updatedAt

  to           User         @relation("ChatTo", fields: [toId], references: [id], onDelete: Cascade)
  sendBy       User         @relation("ChatSendBy", fields: [sendById], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId], map: "conversation_id")
  @@index([sendById], map: "send_by_id")
  @@index([toId], map: "to_id")
  @@index([is_read], map: "is_read")
  @@map("chats")
}

enum MessageType {
  text
  image
  file
  audio
  video
}

model NotificationItems {
  id           Int     @id @default(autoincrement())
  message      String  @db.Text
  isSeen       Boolean @default(false)
  navigate_url String  @db.Text
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  // Thêm quan hệ tới User
  userId       Int
  user         User    @relation(fields: [userId], references: [id])

  @@map("notification_items")
}

model Documents {
  id            Int     @id @default(autoincrement())
  file_name     String? @db.VarChar(200)
  file_location String? @unique @db.VarChar(200)
  user_id       Int?
  user          User?   @relation(fields: [user_id], references: [id])
}